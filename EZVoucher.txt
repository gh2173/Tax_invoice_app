const puppeteer = require('puppeteer-extra');
const StealthPlugin = require('puppeteer-extra-plugin-stealth');
const winston = require('winston');
const fs = require('fs');
const path = require('path');

// 대기 유틸리티 함수 추가
const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));

// 스텔스 플러그인 적용 (사이트가 봇을 감지하지 못하도록)
puppeteer.use(StealthPlugin());

// 로거 설정
const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.printf(({ timestamp, level, message }) => {
      return `[${timestamp}] ${level.toUpperCase()}: ${message}`;
    })
  ),
  transports: [
    new winston.transports.Console(),
    new winston.transports.File({ filename: 'rpa.log' })
  ]
});

/**
 * Dynamics 365 사이트 자동화 함수
 * @param {Object} credentials - 로그인 정보 객체 (username, password)
 */
async function navigateToDynamics365(credentials) {
  logger.info('RPA 프로세스 시작: Dynamics 365 탐색');
  
  // 브라우저 실행 (화면에 표시됨)
  const browser = await puppeteer.launch({
    headless: false, // 화면에 표시
    defaultViewport: null, // 전체 화면으로 설정
    args: [
      '--start-maximized',
      '--ignore-certificate-errors',
      '--ignore-certificate-errors-spki-list',
      '--allow-insecure-localhost'
    ]
  });

  try {
    const page = await browser.newPage();
    
    // SSL 인증서 오류 처리
    await page.setBypassCSP(true);
    
    // 페이지 요청 인터셉트 설정 (SSL 오류 처리용)
    await page.setRequestInterception(true);
    page.on('request', request => {
      request.continue();
    });
    
    // 대화상자 처리 (인증서 경고 등)
    page.on('dialog', async dialog => {
      logger.info(`대화상자 감지: ${dialog.message()}`);
      await dialog.accept();
    });
    
    // 1. D365 페이지 접속
    logger.info('D365 페이지로 이동 중...');
    await page.goto('https://d365.nepes.co.kr/namespaces/AXSF/?cmp=K02&mi=DefaultDashboard', {
      waitUntil: 'networkidle2',
      timeout: 60000 // 60초 타임아웃
    });
    logger.info('D365 페이지 로드 완료');

    // 로그인 처리 (필요한 경우)
    if (await page.$('input[type="email"]') !== null || await page.$('#userNameInput') !== null) {
      logger.info('로그인 화면 감지됨, 로그인 시도 중...');
      await handleLogin(page, credentials);
    }

    // 로그인 후 페이지가 완전히 로드될 때까지 5초 대기
    logger.info('로그인 후 페이지가 완전히 로드될 때까지 5초 대기 중...');
    await delay(5000);  // 5초 대기
    logger.info('5초 대기 완료');

    // 2. 즐겨찾기 아이콘 클릭
    logger.info('즐겨찾기 아이콘 찾는 중...');
    
    // 즐겨찾기 아이콘 클릭 시도
    try {
      // 제공된 정확한 선택자로 찾기
      await page.waitForSelector('span.workspace-image.StarEmpty-symbol[data-dyn-title="즐겨찾기"][data-dyn-image-type="Symbol"]', { 
        visible: true,
        timeout: 10000
      });
      
      await page.click('span.workspace-image.StarEmpty-symbol[data-dyn-title="즐겨찾기"][data-dyn-image-type="Symbol"]');
      logger.info('정확한 선택자로 즐겨찾기 아이콘 클릭 성공');
    } catch (error) {
      logger.warn(`정확한 선택자로 즐겨찾기 아이콘을 찾지 못함: ${error.message}`);
      
      // 더 간단한 선택자로 시도
      try {
        await page.waitForSelector('span.workspace-image.StarEmpty-symbol[data-dyn-title="즐겨찾기"]', { 
          visible: true,
          timeout: 5000
        });
        
        await page.click('span.workspace-image.StarEmpty-symbol[data-dyn-title="즐겨찾기"]');
        logger.info('단순 선택자로 즐겨찾기 아이콘 클릭 성공');
      } catch (iconError) {
        logger.warn(`단순 선택자로도 즐겨찾기 아이콘을 찾지 못함: ${iconError.message}`);
        
        // 클래스 이름으로 시도
        try {
          await page.waitForSelector('.StarEmpty-symbol', { visible: true, timeout: 5000 });
          await page.click('.StarEmpty-symbol');
          logger.info('클래스 이름으로 즐겨찾기 아이콘 클릭 성공');
        } catch (classError) {
          logger.warn(`클래스 이름으로도 즐겨찾기 아이콘을 찾지 못함: ${classError.message}`);
          
          // JavaScript로 시도
          try {
            logger.info('JavaScript로 즐겨찾기 아이콘 찾기 시도...');
            
            await page.evaluate(() => {
              // 여러 방법으로 요소 찾기
              const spans = Array.from(document.querySelectorAll('span'));
              const favIcon = spans.find(span => 
                span.getAttribute('data-dyn-title') === '즐겨찾기' || 
                span.classList.contains('StarEmpty-symbol') ||
                (span.className && span.className.includes('StarEmpty'))
              );
              
              if (favIcon) {
                favIcon.click();
              } else {
                throw new Error('JavaScript로도 즐겨찾기 아이콘을 찾을 수 없음');
              }
            });
            
            logger.info('JavaScript로 즐겨찾기 아이콘 클릭 성공');
          } catch (jsError) {
            logger.error(`JavaScript로도 즐겨찾기 아이콘을 찾지 못함: ${jsError.message}`);
            throw new Error('즐겨찾기 아이콘을 찾을 수 없습니다');
          }
        }
      }
    }
    
    logger.info('즐겨찾기 아이콘 클릭 완료');
    
    // 클릭 후 메뉴가 표시될 때까지 잠시 대기
    await delay(3000);  // 3초 대기
    logger.info('즐겨찾기 메뉴 로드 대기 완료');

    // 3. 메뉴에서 "엑셀 전표 업로드" 클릭
    logger.info('"엑셀 전표 업로드" 메뉴 아이템 찾는 중...');
    
    // 정확한 선택자로 시도
    try {
      // 제공된 정확한 선택자로 찾기
      const exactSelector = 'div.modulesPane-link.modulesFlyout-isFavorite[data-dyn-selected="false"][role="treeitem"] a.modulesPane-linkText[data-dyn-title="엑셀 전표 업로드"][role="link"]';
      await page.waitForSelector(exactSelector, { visible: true, timeout: 10000 });
      await page.click(exactSelector);
      logger.info('정확한 선택자로 "엑셀 전표 업로드" 메뉴 클릭 완료');
    } catch (error) {
      logger.warn(`정확한 선택자로 메뉴를 찾지 못함: ${error.message}`);
      
      // 원래 코드의 선택자로 시도
      try {
        const selector = 'div[data-dyn-title="엑셀 전표 업로드"], div.modulesPane-link a[data-dyn-title="엑셀 전표 업로드"], .modulesPane-link a.modulesPane-linkText[data-dyn-title="엑셀 전표 업로드"]';
        await page.waitForSelector(selector, { visible: true, timeout: 5000 });
        await page.click(selector);
        logger.info('기본 선택자로 "엑셀 전표 업로드" 메뉴 클릭 완료');
      } catch (selectorError) {
        logger.warn(`기본 선택자로도 메뉴를 찾지 못함: ${selectorError.message}`);
        
        // 텍스트 기반으로 요소 찾기
        try {
          const menuItems = await page.$$('.modulesPane-link, .modulesFlyout-isFavorite');
          
          let found = false;
          for (const item of menuItems) {
            const text = await page.evaluate(el => el.textContent, item);
            if (text.includes('엑셀 전표 업로드')) {
              await item.click();
              found = true;
              logger.info('텍스트 검색으로 "엑셀 전표 업로드" 메뉴 클릭 완료');
              break;
            }
          }
          
          if (!found) {
            // 링크 텍스트로 찾기
            try {
              // 페이지에서 JavaScript 실행하여 요소 찾기
              await page.evaluate(() => {
                const links = Array.from(document.querySelectorAll('a.modulesPane-linkText, div.modulesPane-link a, a[role="link"]'));
                const targetLink = links.find(link => link.textContent.includes('엑셀 전표 업로드'));
                if (targetLink) {
                  targetLink.click();
                } else {
                  throw new Error('링크를 찾을 수 없음');
                }
              });
              logger.info('JavaScript 실행으로 "엑셀 전표 업로드" 메뉴 클릭 완료');
            } catch (jsError) {
              logger.error(`JavaScript로도 메뉴를 찾지 못함: ${jsError.message}`);
              throw new Error('메뉴 아이템을 찾을 수 없습니다: 엑셀 전표 업로드');
            }
          }
        } catch (textError) {
          logger.error(`텍스트 검색으로도 메뉴를 찾지 못함: ${textError.message}`);
          throw new Error('모든 방법으로 "엑셀 전표 업로드" 메뉴를 찾지 못했습니다');
        }
      }
    }
    
    // 엑셀 전표 업로드 페이지 로드 대기
    logger.info('엑셀 전표 업로드 페이지 로드 대기 중...');
    await delay(5000);  // 5초 대기
    logger.info('엑셀 전표 업로드 페이지 로드 완료');

    // 추가 동작 1: lookupButton 클래스를 가진 요소 클릭
    logger.info('lookupButton 클래스 요소 찾는 중...');
    try {
      await page.waitForSelector('.lookupButton[title="오픈"]', { 
        visible: true, 
        timeout: 10000 
      });
      await page.click('.lookupButton[title="오픈"]');
      logger.info('lookupButton 클릭 성공');
    } catch (error) {
      logger.warn(`lookupButton을 찾지 못함: ${error.message}`);
      
      // JavaScript로 시도
      try {
        await page.evaluate(() => {
          const lookupButtons = Array.from(document.querySelectorAll('.lookupButton'));
          const button = lookupButtons.find(btn => 
            btn.getAttribute('title') === '오픈' || 
            btn.getAttribute('data-dyn-bind')?.includes('Input_LookupTooltip')
          );
          
          if (button) {
            button.click();
          } else {
            throw new Error('lookupButton을 찾을 수 없음');
          }
        });
        logger.info('JavaScript로 lookupButton 클릭 성공');
      } catch (jsError) {
        logger.error(`JavaScript로도 lookupButton을 찾지 못함: ${jsError.message}`);
        throw new Error('lookupButton을 찾을 수 없습니다');
      }
    }

    // 팝업이 열릴 때까지 대기
    await delay(3000);
    logger.info('lookupButton 클릭 후 팝업 대기 완료');

    // 추가 동작 2: "일반전표(ARK)" 값을 가진 텍스트 입력 필드 클릭
    logger.info('"일반전표(ARK)" 텍스트 필드 찾는 중...');
    try {
      await page.waitForSelector('input[value="일반전표(ARK)"], input[title="일반전표(ARK)"]', { 
        visible: true, 
        timeout: 10000 
      });
      await page.click('input[value="일반전표(ARK)"], input[title="일반전표(ARK)"]');
      logger.info('"일반전표(ARK)" 텍스트 필드 클릭 성공');
    } catch (error) {
      logger.warn(`"일반전표(ARK)" 텍스트 필드를 찾지 못함: ${error.message}`);
      
      // ID로 시도
      try {
        await page.waitForSelector('#SysGen_Name_125_0_0_input', { visible: true, timeout: 5000 });
        await page.click('#SysGen_Name_125_0_0_input');
        logger.info('ID로 "일반전표(ARK)" 텍스트 필드 클릭 성공');
      } catch (idError) {
        logger.warn(`ID로도 텍스트 필드를 찾지 못함: ${idError.message}`);
        
        // JavaScript로 시도
        try {
          await page.evaluate(() => {
            const inputs = Array.from(document.querySelectorAll('input[type="text"]'));
            const input = inputs.find(inp => 
              inp.value === '일반전표(ARK)' || 
              inp.title === '일반전표(ARK)'
            );
            
            if (input) {
              input.click();
            } else {
              throw new Error('텍스트 필드를 찾을 수 없음');
            }
          });
          logger.info('JavaScript로 "일반전표(ARK)" 텍스트 필드 클릭 성공');
        } catch (jsError) {
          logger.error(`JavaScript로도 텍스트 필드를 찾지 못함: ${jsError.message}`);
          throw new Error('"일반전표(ARK)" 텍스트 필드를 찾을 수 없습니다');
        }
      }
    }

    await delay(2000);
    logger.info('텍스트 필드 클릭 후 대기 완료');

    // 추가 동작 3: 특정 텍스트 박스에 "test" 입력
    logger.info('텍스트 박스 찾아 "test" 입력 중...');
    try {
      // ID로 시도
      await page.waitForSelector('#kpc_exceluploadforledgerjournal_2_FormStringControl_Txt_input', { 
        visible: true, 
        timeout: 10000 
      });
      await page.click('#kpc_exceluploadforledgerjournal_2_FormStringControl_Txt_input');
      await page.type('#kpc_exceluploadforledgerjournal_2_FormStringControl_Txt_input', 'test');
      logger.info('텍스트 박스에 "test" 입력 성공');
    } catch (error) {
      logger.warn(`텍스트 박스를 찾지 못함: ${error.message}`);
      
      // 클래스로 시도
      try {
        await page.waitForSelector('input.textbox.field.displayoption[role="textbox"]', { 
          visible: true, 
          timeout: 5000 
        });
        await page.click('input.textbox.field.displayoption[role="textbox"]');
        await page.type('input.textbox.field.displayoption[role="textbox"]', 'test');
        logger.info('클래스로 텍스트 박스에 "test" 입력 성공');
      } catch (classError) {
        logger.warn(`클래스로도 텍스트 박스를 찾지 못함: ${classError.message}`);
        
        // JavaScript로 시도
        try {
          await page.evaluate(() => {
            const inputs = Array.from(document.querySelectorAll('input[role="textbox"]'));
            const input = inputs.find(inp => 
              inp.className.includes('textbox') || 
              inp.id?.includes('FormStringControl_Txt_input')
            );
            
            if (input) {
              input.focus();
              input.value = 'test';
              input.dispatchEvent(new Event('input', { bubbles: true }));
              return true;
            } else {
              throw new Error('텍스트 박스를 찾을 수 없음');
            }
          });
          logger.info('JavaScript로 텍스트 박스에 "test" 입력 성공');
        } catch (jsError) {
          logger.error(`JavaScript로도 텍스트 박스 입력에 실패: ${jsError.message}`);
          throw new Error('텍스트 박스를 찾거나 입력할 수 없습니다');
        }
      }
    }

    await delay(2000);
    logger.info('텍스트 입력 후 대기 완료');

    // 추가 동작 4: "업로드" 버튼 클릭 (확인 버튼 대신)
    logger.info('"업로드" 버튼 찾는 중...');
    try {
      await page.waitForSelector('#kpc_exceluploadforledgerjournal_2_UploadButton_label', { 
        visible: true, 
        timeout: 10000 
      });
      await page.click('#kpc_exceluploadforledgerjournal_2_UploadButton_label');
      logger.info('ID로 "업로드" 버튼 클릭 성공');
    } catch (error) {
      logger.warn(`ID로 "업로드" 버튼을 찾지 못함: ${error.message}`);
      
      // 텍스트로 시도
      try {
        await page.waitForSelector('span.button-label:contains("업로드")', { 
          visible: true, 
          timeout: 5000 
        });
        await page.click('span.button-label:contains("업로드")');
        logger.info('텍스트로 "업로드" 버튼 클릭 성공');
      } catch (textError) {
        logger.warn(`텍스트로도 "업로드" 버튼을 찾지 못함: ${textError.message}`);
        
        // JavaScript로 시도
        try {
          await page.evaluate(() => {
            const spans = Array.from(document.querySelectorAll('span.button-label, span[id*="UploadButton_label"]'));
            const uploadButton = spans.find(span => span.textContent.trim() === '업로드');
            
            if (uploadButton) {
              uploadButton.click();
            } else {
              // 다른 방식으로 업로드 버튼 찾기
              const buttons = Array.from(document.querySelectorAll('button, div.button-container, [role="button"]'));
              const btn = buttons.find(b => {
                const text = b.textContent.trim();
                return text === '업로드' || text.includes('업로드');
              });
              
              if (btn) {
                btn.click();
              } else {
                throw new Error('업로드 버튼을 찾을 수 없음');
              }
            }
          });
          logger.info('JavaScript로 "업로드" 버튼 클릭 성공');
        } catch (jsError) {
          logger.error(`JavaScript로도 "업로드" 버튼을 찾지 못함: ${jsError.message}`);
          throw new Error('"업로드" 버튼을 찾을 수 없습니다');
        }
      }
    }

    // 추가 동작 5: "Browse" 버튼 클릭 및 파일 선택
    await delay(3000); // 업로드 버튼 클릭 후 잠시 대기
    logger.info('"Browse" 버튼 찾는 중...');

    // 폴더 경로 설정
    const folderPath = 'C:\\Users\\nepes\\OneDrive - 네패스\\바탕 화면\\PROJECT_GIT\\Electron_Test\\my-electron-app\\Tax_Invoice_app';

    // '1.'로 시작하는 엑셀 파일 찾기 함수
    function findExcelFileStartingWith1(folderPath) {
      try {
        const files = fs.readdirSync(folderPath);
        const excelExtensions = ['.xlsx', '.xls', '.xlsm'];
        
        // '1.'로 시작하고 확장자가 엑셀인 파일 필터링
        const matchingFiles = files.filter(file => {
          const isExcel = excelExtensions.some(ext => file.toLowerCase().endsWith(ext));
          return file.startsWith('1.') && isExcel;
        });
        
        if (matchingFiles.length > 0) {
          // 찾은 파일 중 첫 번째 파일 반환
          return path.join(folderPath, matchingFiles[0]);
        }
        
        return null; // 해당하는 파일이 없는 경우
      } catch (error) {
        logger.error(`폴더 내 파일 검색 중 오류 발생: ${error.message}`);
        return null;
      }
    }

    try {
      // 먼저 파일 경로 확인
      const filePath = findExcelFileStartingWith1(folderPath);
      
      if (!filePath) {
        throw new Error('폴더에서 "1."로 시작하는 엑셀 파일을 찾을 수 없습니다.');
      }
      
      logger.info(`사용할 파일: ${path.basename(filePath)}`);
      
      // 방법 1: fileChooser를 사용하여 파일 선택
      try {
        // 파일 선택기가 열릴 때까지 대기하면서 Browse 버튼 클릭
        const [fileChooser] = await Promise.all([
          page.waitForFileChooser({ timeout: 10000 }),
          page.click('#Dialog_4_UploadBrowseButton, button[name="UploadBrowseButton"]')
        ]);
        
        // 찾은 파일 선택
        await fileChooser.accept([filePath]);
        logger.info(`fileChooser 방식으로 파일 선택 완료: ${path.basename(filePath)}`);
      } catch (chooserError) {
        logger.warn(`fileChooser 방식 실패: ${chooserError.message}`);
        
        // 방법 2: 파일 입력 필드를 직접 찾아 조작
        try {
          // 먼저 Brows 버튼 클릭 취소(이미 클릭했을 수 있기 때문에)
          await page.keyboard.press('Escape');
          await delay(1000);
          
          // 파일 입력 필드 찾기
          const fileInputSelector = 'input[type="file"]';
          const fileInput = await page.$(fileInputSelector);
          
          if (fileInput) {
            // 파일 입력 필드가 있으면 직접 파일 설정
            await fileInput.uploadFile(filePath);
            logger.info(`uploadFile 방식으로 파일 선택 완료: ${path.basename(filePath)}`);
          } else {
            // 파일 입력 필드가 없으면 다시 Browse 버튼 클릭 시도
            await page.click('#Dialog_4_UploadBrowseButton, button[name="UploadBrowseButton"]');
            
            // 사용자에게 파일 선택 안내
            await page.evaluate((fileName) => {
              alert(`자동 파일 선택에 실패했습니다. 파일 탐색기에서 "${fileName}" 파일을 수동으로 선택해주세요.`);
            }, path.basename(filePath));
            
            // 사용자가 파일을 선택할 때까지 대기 (30초)
            logger.info('사용자의 수동 파일 선택 대기 중... (30초)');
            await delay(30000);
          }
        } catch (inputError) {
          logger.error(`파일 입력 방식도 실패: ${inputError.message}`);
          
          // 최후의 방법: 사용자에게 안내
          await page.evaluate((message) => {
            alert(message);
          }, `자동 파일 선택에 실패했습니다. 파일 탐색기에서 "1."로 시작하는 엑셀 파일을 수동으로 선택해주세요.`);
          
          // 사용자가 파일을 선택할 때까지 대기 (30초)
          logger.info('사용자의 수동 파일 선택 대기 중... (30초)');
          await delay(30000);
        }
      }
      
      // 파일 선택 후 대기
      await delay(3000);
      logger.info('파일 선택 후 대기 완료');
      
      // 파일 선택 대화상자에서 "확인" 버튼이 필요한 경우 클릭
      try {
        const confirmButtonSelector = '#Dialog_4_OkButton, #SysOKButton, span.button-label:contains("확인"), span.button-label:contains("OK")';
        const confirmButton = await page.$(confirmButtonSelector);
        
        if (confirmButton) {
          await confirmButton.click();
          logger.info('파일 선택 대화상자의 "확인" 버튼 클릭 성공');
        }
      } catch (confirmError) {
        logger.warn(`확인 버튼 클릭 시도 중 오류: ${confirmError.message}`);
        logger.info('계속 진행합니다...');
      }
      
    } catch (browseError) {
      logger.error(`"Browse" 버튼 처리 오류: ${browseError.message}`);
      
      // 사용자에게 파일 선택 안내
      try {
        await page.evaluate(() => {
          alert('자동화 스크립트에 문제가 발생했습니다. 수동으로 "Browse" 버튼을 클릭하고 "1."로 시작하는 엑셀 파일을 선택해주세요.');
        });
        
        // 사용자가 작업을 완료할 때까지 대기
        logger.info('사용자의 수동 파일 선택 대기 중... (60초)');
        await delay(60000);
      } catch (alertError) {
        logger.error(`알림 표시 중 오류: ${alertError.message}`);
      }
    }

    // 추가 동작 6: 파일 선택 후 최종 "확인" 버튼 클릭
    await delay(5000);  // 파일 선택 후 충분히 대기
    logger.info('파일 선택 후 최종 "확인" 버튼 찾는 중...');

    try {
      // ID로 시도
      await page.waitForSelector('#Dialog_4_OkButton', { 
        visible: true, 
        timeout: 10000 
      });
      await page.click('#Dialog_4_OkButton');
      logger.info('ID로 최종 "확인" 버튼 클릭 성공');
    } catch (error) {
      logger.warn(`ID로 최종 "확인" 버튼을 찾지 못함: ${error.message}`);
      
      // 이름 속성으로 시도
      try {
        await page.waitForSelector('button[name="OkButton"]', { 
          visible: true, 
          timeout: 5000 
        });
        await page.click('button[name="OkButton"]');
        logger.info('name 속성으로 최종 "확인" 버튼 클릭 성공');
      } catch (nameError) {
        logger.warn(`name 속성으로도 최종 "확인" 버튼을 찾지 못함: ${nameError.message}`);
        
        // 레이블로 시도
        try {
          await page.waitForSelector('#Dialog_4_OkButton_label, span.button-label:contains("확인")', { 
            visible: true, 
            timeout: 5000 
          });
          await page.click('#Dialog_4_OkButton_label, span.button-label:contains("확인")');
          logger.info('레이블로 최종 "확인" 버튼 클릭 성공');
        } catch (labelError) {
          logger.warn(`레이블로도 최종 "확인" 버튼을 찾지 못함: ${labelError.message}`);
          
          // JavaScript로 시도
          try {
            await page.evaluate(() => {
              // 방법 1: ID로 찾기
              const okButton = document.querySelector('#Dialog_4_OkButton');
              if (okButton) {
                okButton.click();
                return;
              }
              
              // 방법 2: 레이블로 찾기
              const okLabel = document.querySelector('#Dialog_4_OkButton_label');
              if (okLabel) {
                okLabel.click();
                return;
              }
              
              // 방법 3: 버튼 텍스트로 찾기
              const buttons = Array.from(document.querySelectorAll('button, span.button-label'));
              const button = buttons.find(btn => btn.textContent.trim() === '확인');
              if (button) {
                button.click();
                return;
              }
              
              // 방법 4: 버튼 클래스와 속성으로 찾기
              const dynamicsButtons = Array.from(document.querySelectorAll('button.dynamicsButton.button-isDefault'));
              const defaultButton = dynamicsButtons.find(btn => {
                const label = btn.querySelector('.button-label');
                return label && label.textContent.trim() === '확인';
              });
              
              if (defaultButton) {
                defaultButton.click();
              } else {
                throw new Error('최종 확인 버튼을 찾을 수 없음');
              }
            });
            logger.info('JavaScript로 최종 "확인" 버튼 클릭 성공');
          } catch (jsError) {
            logger.error(`JavaScript로도 최종 "확인" 버튼을 찾지 못함: ${jsError.message}`);
            logger.warn('사용자가 수동으로 "확인" 버튼을 클릭해야 할 수 있습니다.');
            
            // 사용자에게 안내
            await page.evaluate(() => {
              alert('자동으로 "확인" 버튼을 클릭할 수 없습니다. 수동으로 "확인" 버튼을 클릭해주세요.');
            });
            
            // 사용자가 확인 버튼을 클릭할 때까지 대기 (20초)
            logger.info('사용자의 수동 "확인" 버튼 클릭 대기 중... (20초)');
            await delay(20000);
          }
        }
      }
    }

    // 추가 동작 7: 마지막 "확인" 버튼(kpc_exceluploadforledgerjournal_2_OKButton) 클릭
    await delay(5000);  // 이전 단계 완료 후 충분히 대기
    logger.info('마지막 "확인" 버튼(kpc_exceluploadforledgerjournal_2_OKButton) 찾는 중...');

    try {
      // ID로 시도
      await page.waitForSelector('#kpc_exceluploadforledgerjournal_2_OKButton', { 
        visible: true, 
        timeout: 10000 
      });
      await page.click('#kpc_exceluploadforledgerjournal_2_OKButton');
      logger.info('ID로 마지막 "확인" 버튼 클릭 성공');
    } catch (error) {
      logger.warn(`ID로 마지막 "확인" 버튼을 찾지 못함: ${error.message}`);
      
      // 이름 속성으로 시도
      try {
        await page.waitForSelector('button[name="OKButton"][id*="kpc_exceluploadforledgerjournal"]', { 
          visible: true, 
          timeout: 5000 
        });
        await page.click('button[name="OKButton"][id*="kpc_exceluploadforledgerjournal"]');
        logger.info('name 속성으로 마지막 "확인" 버튼 클릭 성공');
      } catch (nameError) {
        logger.warn(`name 속성으로도 마지막 "확인" 버튼을 찾지 못함: ${nameError.message}`);
        
        // 레이블로 시도
        try {
          await page.waitForSelector('#kpc_exceluploadforledgerjournal_2_OKButton_label', { 
            visible: true, 
            timeout: 5000 
          });
          await page.click('#kpc_exceluploadforledgerjournal_2_OKButton_label');
          logger.info('레이블로 마지막 "확인" 버튼 클릭 성공');
        } catch (labelError) {
          logger.warn(`레이블로도 마지막 "확인" 버튼을 찾지 못함: ${labelError.message}`);
          
          // JavaScript로 시도
          try {
            await page.evaluate(() => {
              // 방법 1: ID로 찾기
              const okButton = document.querySelector('#kpc_exceluploadforledgerjournal_2_OKButton');
              if (okButton) {
                okButton.click();
                return;
              }
              
              // 방법 2: 레이블로 찾기
              const okLabel = document.querySelector('#kpc_exceluploadforledgerjournal_2_OKButton_label');
              if (okLabel) {
                okLabel.click();
                return;
              }
              
              // 방법 3: ID 패턴으로 찾기
              const buttons = Array.from(document.querySelectorAll('button[id*="kpc_exceluploadforledgerjournal"][id*="OKButton"]'));
              if (buttons.length > 0) {
                buttons[0].click();
                return;
              }
              
              // 방법 4: 버튼 텍스트와 위치로 찾기
              const allButtons = Array.from(document.querySelectorAll('button.dynamicsButton'));
              const confirmButton = allButtons.find(btn => {
                const label = btn.querySelector('.button-label');
                return label && (label.textContent.trim() === '확인' || label.textContent.trim() === 'OK');
              });
              
              if (confirmButton) {
                confirmButton.click();
              } else {
                throw new Error('마지막 확인 버튼을 찾을 수 없음');
              }
            });
            logger.info('JavaScript로 마지막 "확인" 버튼 클릭 성공');
          } catch (jsError) {
            logger.error(`JavaScript로도 마지막 "확인" 버튼을 찾지 못함: ${jsError.message}`);
            logger.warn('사용자가 수동으로 마지막 "확인" 버튼을 클릭해야 할 수 있습니다.');
            
            // 사용자에게 안내
            await page.evaluate(() => {
              alert('자동으로 마지막 "확인" 버튼을 클릭할 수 없습니다. 수동으로 "확인" 버튼을 클릭해주세요.');
            });
            
            // 사용자가 수동으로 작업할 시간 제공
            logger.info('사용자의 수동 마지막 "확인" 버튼 클릭 대기 중... (20초)');
            await delay(20000);
          }
        }
      }
    }

    // 추가 동작 8: 분개장 배치 번호 요소 찾아서 클릭
    await delay(8000);  // 마지막 확인 버튼 클릭 후 페이지 로드 충분히 대기
    logger.info('분개장 배치 번호 요소 찾는 중...');

    try {
      // ID로 시도
      await page.waitForSelector('#LedgerJournalTable_JournalNum_139_0_0_input', { 
      visible: true, 
      timeout: 15000 
      });
      
      // 요소 클릭
      await page.click('#LedgerJournalTable_JournalNum_139_0_0_input');
      logger.info('분개장 배치 번호 요소 클릭 성공');
    } catch (error) {
      logger.warn(`ID로 분개장 배치 번호 요소를 찾지 못함: ${error.message}`);
      
      // 속성과 값으로 시도
      try {
      await page.waitForSelector('input[role="textbox"][aria-label="분개장 배치 번호"]', { 
      visible: true, 
      timeout: 5000 
      });
      await page.click('input[role="textbox"][aria-label="분개장 배치 번호"]');
      logger.info('속성으로 분개장 배치 번호 요소 클릭 성공');
      } catch (attrError) {
      logger.warn(`속성으로도 분개장 배치 번호 요소를 찾지 못함: ${attrError.message}`);
      
      // 값으로 시도 (시작 부분으로 부분 매칭)
      try {
      const partialSelector = 'input[value^="K02GJBN-"]';
      await page.waitForSelector(partialSelector, { visible: true, timeout: 5000 });
      await page.click(partialSelector);
      logger.info('값으로 분개장 배치 번호 요소 클릭 성공');
      } catch (valueError) {
      logger.warn(`값으로도 분개장 배치 번호 요소를 찾지 못함: ${valueError.message}`);
      
      // JavaScript로 시도
      try {
      await page.evaluate(() => {
        // 방법 1: ID로 찾기
        const journalNumInput = document.querySelector('#LedgerJournalTable_JournalNum_139_0_0_input');
        if (journalNumInput) {
        journalNumInput.click();
        return;
        }
        
        // 방법 2: aria-label로 찾기
        const inputByLabel = document.querySelector('input[aria-label="분개장 배치 번호"]');
        if (inputByLabel) {
        inputByLabel.click();
        return;
        }
        
        // 방법 3: 값으로 찾기
        const inputs = Array.from(document.querySelectorAll('input[type="text"][readonly]'));
        const journalInput = inputs.find(input => 
        input.value && input.value.startsWith('K02GJBN-')
        );
        
        if (journalInput) {
        journalInput.click();
        } else {
        throw new Error('분개장 배치 번호 요소를 찾을 수 없음');
        }
      });
      logger.info('JavaScript로 분개장 배치 번호 요소 클릭 성공');
      } catch (jsError) {
      logger.error(`JavaScript로도 분개장 배치 번호 요소를 찾지 못함: ${jsError.message}`);
      logger.warn('사용자가 수동으로 분개장 배치 번호를 클릭해야 할 수 있습니다.');
      
      // 사용자에게 안내
      await page.evaluate(() => {
        alert('자동으로 분개장 배치 번호를 클릭할 수 없습니다. 수동으로 분개장 배치 번호(K02GJBN-XXXXXX)를 클릭해주세요.');
      });
      
      // 사용자가 수동으로 작업할 시간 제공
      logger.info('사용자의 수동 조작 대기 중... (20초)');
      await delay(20000);
      }
      }
      }
    }

  
    // 추가 동작 9: "검증" 버튼 클릭
    logger.info('"검증" 버튼 찾는 중...');
    try {
      // 제공된 정확한 ID로 시도
      await page.waitForSelector('#LedgerJournalTransDaily_8_NPS_SimulatePosting_label', { 
        visible: true, 
        timeout: 10000 
      });
      await page.click('#LedgerJournalTransDaily_8_NPS_SimulatePosting_label');
      logger.info('정확한 ID로 "검증" 버튼 클릭 성공');
    } catch (error) {
      logger.warn(`정확한 ID로 "검증" 버튼을 찾지 못함: ${error.message}`);
      
      // 버튼 컨테이너 내 레이블로 시도
      try {
        await page.waitForSelector('div.button-container span.button-label[id*="SimulatePosting_label"]', { 
          visible: true, 
          timeout: 5000 
        });
        await page.click('div.button-container span.button-label[id*="SimulatePosting_label"]');
        logger.info('컨테이너 내 레이블로 "검증" 버튼 클릭 성공');
      } catch (containerError) {
        logger.warn(`컨테이너 내 레이블로도 "검증" 버튼을 찾지 못함: ${containerError.message}`);
        
        // ID 패턴으로 시도 (ID가 변경될 수 있으므로)
        try {
          await page.waitForSelector('span[id$="_NPS_SimulatePosting_label"], span[id*="SimulatePosting_label"]', { 
            visible: true, 
            timeout: 5000 
          });
          await page.click('span[id$="_NPS_SimulatePosting_label"], span[id*="SimulatePosting_label"]');
          logger.info('ID 패턴으로 "검증" 버튼 클릭 성공');
        } catch (patternError) {
          logger.warn(`ID 패턴으로도 "검증" 버튼을 찾지 못함: ${patternError.message}`);
          
          // 클래스와 텍스트로 시도
          try {
            await page.waitForSelector('span.button-label:contains("검증")', { 
              visible: true, 
              timeout: 5000 
            });
            await page.click('span.button-label:contains("검증")');
            logger.info('클래스와 텍스트로 "검증" 버튼 클릭 성공');
          } catch (textError) {
            logger.warn(`클래스와 텍스트로도 "검증" 버튼을 찾지 못함: ${textError.message}`);
            
            // data-dyn-bind 속성으로 시도
            try {
              await page.waitForSelector('span[data-dyn-bind*="button-label"][aria-describedby*="SimulatePosting_helptext"]', { 
                visible: true, 
                timeout: 5000 
              });
              await page.click('span[data-dyn-bind*="button-label"][aria-describedby*="SimulatePosting_helptext"]');
              logger.info('data-dyn-bind 속성으로 "검증" 버튼 클릭 성공');
            } catch (bindError) {
              logger.warn(`data-dyn-bind 속성으로도 "검증" 버튼을 찾지 못함: ${bindError.message}`);
              
              // JavaScript로 시도
              try {
                await page.evaluate(() => {
                  // 방법 1: 정확한 ID로 찾기
                  const validateButton = document.querySelector('#LedgerJournalTransDaily_8_NPS_SimulatePosting_label');
                  if (validateButton) {
                    validateButton.click();
                    return;
                  }
                  
                  // 방법 2: 버튼 컨테이너 내부 찾기
                  const buttonContainers = Array.from(document.querySelectorAll('div.button-container'));
                  for (const container of buttonContainers) {
                    const label = container.querySelector('span.button-label');
                    if (label && label.textContent.trim() === '검증') {
                      label.click();
                      return;
                    }
                  }
                  
                  // 방법 3: ID 패턴으로 찾기
                  const buttonLabels = Array.from(document.querySelectorAll('span[id*="_SimulatePosting_label"], span[id*="NPS_SimulatePosting"]'));
                  const validateLabel = buttonLabels.find(btn => btn.textContent.trim() === '검증');
                  if (validateLabel) {
                    validateLabel.click();
                    return;
                  }
                  
                  // 방법 4: 클래스와 텍스트로 찾기
                  const allLabels = Array.from(document.querySelectorAll('span.button-label'));
                  const validateSpan = allLabels.find(span => span.textContent.trim() === '검증');
                  if (validateSpan) {
                    validateSpan.click();
                    return;
                  }
                  
                  // 방법 5: data-dyn-bind 속성과 텍스트로 찾기
                  const dynBindSpans = Array.from(document.querySelectorAll('span[data-dyn-bind*="button-label"]'));
                  const validateDynSpan = dynBindSpans.find(span => 
                    span.textContent.trim() === '검증' ||
                    span.getAttribute('aria-describedby')?.includes('SimulatePosting_helptext')
                  );
                  if (validateDynSpan) {
                    validateDynSpan.click();
                    return;
                  }
                  
                  // 방법 6: 부모 버튼 찾아서 클릭
                  const spans = Array.from(document.querySelectorAll('span'));
                  const span = spans.find(s => s.textContent.trim() === '검증');
                  if (span) {
                    // 부모 버튼 찾기
                    let parent = span;
                    let container = null;
                    
                    // 상위 버튼 컨테이너 찾기
                    while (parent && !container) {
                      if (parent.classList.contains('button-container')) {
                        container = parent;
                        break;
                      }
                      parent = parent.parentElement;
                    }
                    
                    if (container) {
                      container.click();
                      return;
                    }
                    
                    // 직접 클릭
                    span.click();
                    return;
                  }
                  
                  throw new Error('어떤 방법으로도 "검증" 버튼을 찾을 수 없음');
                });
                logger.info('JavaScript로 "검증" 버튼 클릭 성공');
              } catch (jsError) {
                logger.error(`JavaScript로도 "검증" 버튼을 찾지 못함: ${jsError.message}`);
                
                // 사용자에게 안내
                await page.evaluate(() => {
                  alert('자동으로 "검증" 버튼을 클릭할 수 없습니다. 수동으로 "검증" 버튼을 클릭해주세요.');
                });
                
                // 사용자가 수동으로 작업할 시간 제공
                logger.info('사용자의 수동 "검증" 버튼 클릭 대기 중... (20초)');
                await delay(20000);
              }
            }
          }
        }
      }
    }

    // 추가 동작 10: "그룹웨어" 드롭다운 버튼 클릭 (두 번 클릭 방식으로 변경)
    await delay(5000);  // 검증 완료 후 충분히 대기
    logger.info('"그룹웨어" 드롭다운 버튼 찾는 중...');

    async function clickGroupwareDropdown(selector) {
      // 첫 번째 클릭
      await page.click(selector);
      logger.info('첫 번째 "그룹웨어" 드롭다운 버튼 클릭 완료');
      
      // 1초 대기
      await delay(1000);
      
      // 두 번째 클릭
      await page.click(selector);
      logger.info('두 번째 "그룹웨어" 드롭다운 버튼 클릭 완료');
    }

    try {
      // 제공된 HTML 구조의 정확한 ID와 클래스로 시도
      await page.waitForSelector('span.button-label.button-label-dropDown#LedgerJournalTransDaily_6_NPS_GroupWare_label', { 
        visible: true, 
        timeout: 10000 
      });
      await clickGroupwareDropdown('span.button-label.button-label-dropDown#LedgerJournalTransDaily_6_NPS_GroupWare_label');
      logger.info('정확한 선택자로 "그룹웨어" 드롭다운 버튼 두 번 클릭 성공');
    } catch (error) {
      logger.warn(`정확한 선택자로 "그룹웨어" 드롭다운 버튼을 찾지 못함: ${error.message}`);
      
      // ID로만 시도
      try {
        await page.waitForSelector('#LedgerJournalTransDaily_6_NPS_GroupWare_label', { 
          visible: true, 
          timeout: 5000 
        });
        await clickGroupwareDropdown('#LedgerJournalTransDaily_6_NPS_GroupWare_label');
        logger.info('ID로 "그룹웨어" 드롭다운 버튼 두 번 클릭 성공');
      } catch (idError) {
        logger.warn(`ID로도 "그룹웨어" 드롭다운 버튼을 찾지 못함: ${idError.message}`);
        
        // aria-describedby 속성으로 시도
        try {
          await page.waitForSelector('span[aria-describedby="LedgerJournalTransDaily_6_NPS_GroupWare_helptext"]', { 
            visible: true, 
            timeout: 5000 
          });
          await clickGroupwareDropdown('span[aria-describedby="LedgerJournalTransDaily_6_NPS_GroupWare_helptext"]');
          logger.info('aria-describedby 속성으로 "그룹웨어" 드롭다운 버튼 두 번 클릭 성공');
        } catch (attrError) {
          logger.warn(`속성으로도 "그룹웨어" 드롭다운 버튼을 찾지 못함: ${attrError.message}`);
          
          // JavaScript로 시도
          try {
            await page.evaluate(() => {
              // 두 번 클릭하는 함수
              function doubleClickWithDelay(element) {
                // 첫 번째 클릭
                element.click();
                
                // 1초 후 두 번째 클릭
                setTimeout(() => {
                  element.click();
                }, 1000);
              }
              
              // 제공된 HTML 구조 기반으로 요소 찾기
              // 방법 1: 정확한 ID와 클래스로 찾기
              const groupwareBtn = document.querySelector('span.button-label.button-label-dropDown#LedgerJournalTransDaily_6_NPS_GroupWare_label');
              if (groupwareBtn) {
                doubleClickWithDelay(groupwareBtn);
                return;
              }
              
              // 방법 2: ID로만 찾기
              const buttonById = document.querySelector('#LedgerJournalTransDaily_6_NPS_GroupWare_label');
              if (buttonById) {
                doubleClickWithDelay(buttonById);
                return;
              }
              
              // 방법 3: 클래스와 텍스트로 찾기
              const labels = Array.from(document.querySelectorAll('span.button-label.button-label-dropDown'));
              const groupwareLabel = labels.find(label => 
                label.textContent.trim() === '그룹웨어' || 
                label.getAttribute('aria-describedby')?.includes('GroupWare_helptext')
              );
              
              if (groupwareLabel) {
                doubleClickWithDelay(groupwareLabel);
                return;
              }
              
              // 방법 4: 텍스트만으로 찾기
              const spans = Array.from(document.querySelectorAll('span'));
              const gwSpan = spans.find(span => 
                span.textContent.trim() === '그룹웨어' && 
                (span.className.includes('button-label') || span.getAttribute('data-dyn-bind')?.includes('button-label'))
              );
              
              if (gwSpan) {
                doubleClickWithDelay(gwSpan);
                return;
              }
              
              throw new Error('어떤 방법으로도 "그룹웨어" 드롭다운 버튼을 찾을 수 없음');
            });
            
            // JavaScript 실행 후 약간의 추가 대기 (두 번째 클릭을 기다리기 위함)
            await delay(1500);
            logger.info('JavaScript로 "그룹웨어" 드롭다운 버튼 두 번 클릭 성공');
          } catch (jsError) {
            logger.error(`JavaScript로도 "그룹웨어" 드롭다운 버튼을 찾지 못함: ${jsError.message}`);
            
            // 사용자에게 안내
            await page.evaluate(() => {
              alert('자동으로 "그룹웨어" 드롭다운 버튼을 클릭할 수 없습니다. 수동으로 "그룹웨어" 드롭다운 버튼을 클릭해주세요.');
            });
            
            // 사용자가 수동으로 작업할 시간 제공
            logger.info('사용자의 수동 "그룹웨어" 드롭다운 버튼 클릭 대기 중... (20초)');
            await delay(20000);
          }
        }
      }
    }

    // 드롭다운 메뉴가 표시될 때까지 대기 (두 번 클릭 후 시간 증가)
    await delay(3500);  // 두 번 클릭 후 약간 더 길게 대기
    logger.info('그룹웨어 드롭다운 메뉴 표시 대기 완료');

    // 추가 동작 11: "그룹웨어 승인" 메뉴 아이템 클릭
    logger.info('"그룹웨어 승인" 메뉴 아이템 찾는 중...');

    try {
      // 제공된 HTML 구조의 정확한 버튼 선택자로 시도 (button 요소 자체)
      await page.waitForSelector('button#LedgerJournalTransDaily_6_NPS_GroupWareApproval[aria-label="그룹웨어 승인"]', { 
        visible: true, 
        timeout: 5000 
      });
      await page.click('button#LedgerJournalTransDaily_6_NPS_GroupWareApproval[aria-label="그룹웨어 승인"]');
      logger.info('정확한 버튼 선택자로 "그룹웨어 승인" 메뉴 아이템 클릭 성공');
    } catch (error) {
      logger.warn(`정확한 버튼 선택자로 "그룹웨어 승인" 메뉴 아이템을 찾지 못함: ${error.message}`);
      
      // 버튼 내부 label로 시도
      try {
        await page.waitForSelector('#LedgerJournalTransDaily_6_NPS_GroupWareApproval_label', { 
          visible: true, 
          timeout: 5000 
        });
        await page.click('#LedgerJournalTransDaily_6_NPS_GroupWareApproval_label');
        logger.info('버튼 내부 label로 "그룹웨어 승인" 메뉴 아이템 클릭 성공');
      } catch (labelError) {
        logger.warn(`버튼 내부 label로도 "그룹웨어 승인" 메뉴 아이템을 찾지 못함: ${labelError.message}`);
        
        // 역할 속성과 텍스트 내용으로 시도
        try {
          await page.waitForSelector('button[role="menuitem"] span.button-label:contains("그룹웨어 승인")', { 
            visible: true, 
            timeout: 5000 
          });
          await page.click('button[role="menuitem"] span.button-label:contains("그룹웨어 승인")');
          logger.info('역할 속성과 텍스트 내용으로 "그룹웨어 승인" 메뉴 아이템 클릭 성공');
        } catch (roleError) {
          logger.warn(`역할 속성과 텍스트 내용으로도 "그룹웨어 승인" 메뉴 아이템을 찾지 못함: ${roleError.message}`);
          
          // JavaScript로 시도
          try {
            await page.evaluate(() => {
              // 방법 1: 정확한 ID로 버튼 찾기
              const approvalBtn = document.querySelector('button#LedgerJournalTransDaily_6_NPS_GroupWareApproval');
              if (approvalBtn) {
                approvalBtn.click();
                return;
              }
              
              // 방법 2: 레이블 찾기
              const approvalLabel = document.querySelector('#LedgerJournalTransDaily_6_NPS_GroupWareApproval_label');
              if (approvalLabel) {
                approvalLabel.click();
                return;
              }
              
              // 방법 3: 역할과 레이블 텍스트로 찾기
              const menuItems = Array.from(document.querySelectorAll('button[role="menuitem"]'));
              const approvalMenuItem = menuItems.find(item => {
                const label = item.querySelector('.button-label');
                return label && label.textContent.trim() === '그룹웨어 승인';
              });
              
              if (approvalMenuItem) {
                approvalMenuItem.click();
                return;
              }
              
              // 방법 4: aria-label 속성으로 찾기
              const buttons = Array.from(document.querySelectorAll('button[aria-label="그룹웨어 승인"]'));
              if (buttons.length > 0) {
                buttons[0].click();
                return;
              }
              
              // 방법 5: 데이터 속성과 클래스로 찾기
              const flyoutItems = Array.from(document.querySelectorAll('button.flyout-menuItem'));
              const approvalItem = flyoutItems.find(item => {
                const text = item.textContent.trim();
                return text.includes('그룹웨어 승인') || 
                      item.getAttribute('aria-label') === '그룹웨어 승인' ||
                      item.getAttribute('data-dyn-controlname') === 'NPS_GroupWareApproval';
              });
              
              if (approvalItem) {
                approvalItem.click();
                return;
              }
              
              throw new Error('어떤 방법으로도 "그룹웨어 승인" 메뉴 아이템을 찾을 수 없음');
            });
            logger.info('JavaScript로 "그룹웨어 승인" 메뉴 아이템 클릭 성공');
          } catch (jsError) {
            logger.error(`JavaScript로도 "그룹웨어 승인" 메뉴 아이템을 찾지 못함: ${jsError.message}`);
            
            // 사용자에게 안내
            await page.evaluate(() => {
              alert('자동으로 "그룹웨어 승인" 메뉴 아이템을 클릭할 수 없습니다. 수동으로 "그룹웨어 승인" 메뉴 아이템을 클릭해주세요.');
            });
            
            // 사용자가 수동으로 작업할 시간 제공
            logger.info('사용자의 수동 "그룹웨어 승인" 메뉴 아이템 클릭 대기 중... (20초)');
            await delay(20000);
          }
        }
      }
    }

    // 그룹웨어 승인 창 열기 완료 후 대기
    await delay(5000);
    logger.info('그룹웨어 승인 창 열기 완료');

    // 추가 동작 12: 그룹웨어 로그인 처리
    logger.info('그룹웨어 로그인 페이지 처리 중...');
    try {
      // 새 페이지가 열리는지 확인 (팝업 또는 iframe)
      const popupFrame = page.frames().find(frame => 
        frame.url().includes('thanks.nepes.co.kr') || 
        frame.url().includes('Logon/Login.aspx')
      );
      
      // 새 창으로 열릴 경우 처리
      if (!popupFrame) {
        // 새 페이지가 열릴 때까지 대기
        logger.info('새 로그인 창이 열리는지 확인 중...');
        const newPagePromise = new Promise(resolve => browser.once('targetcreated', target => resolve(target.page())));
        const loginPage = await newPagePromise;
        
        // 새 페이지가 완전히 로드될 때까지 대기
        await loginPage.waitForNavigation({ waitUntil: 'networkidle2', timeout: 10000 }).catch(() => {});
        
        logger.info('그룹웨어 로그인 페이지 감지됨');
        
        // 2. 아이디 입력
        logger.info('아이디 입력 중...');
        await loginPage.waitForSelector('input#txtLoginID.inputText', { 
          visible: true, 
          timeout: 10000 
        });
        await loginPage.click('input#txtLoginID.inputText');
        await loginPage.type('input#txtLoginID.inputText', 'yjw1133');
        logger.info('아이디 입력 완료');
        
        // 3. 비밀번호 입력
        logger.info('비밀번호 입력 중...');
        await loginPage.waitForSelector('input#txtPassword.inputText', { 
          visible: true, 
          timeout: 10000 
        });
        await loginPage.click('input#txtPassword.inputText');
        await loginPage.type('input#txtPassword.inputText', 'skdmlalfo52@');
        logger.info('비밀번호 입력 완료');
        
        // 4. 로그인 버튼 클릭
        logger.info('로그인 버튼 클릭 중...');
        await loginPage.waitForSelector('a#btnLogin.btnSign', { 
          visible: true, 
          timeout: 10000 
        });
        await loginPage.click('a#btnLogin.btnSign');
        logger.info('로그인 버튼 클릭 완료');
        
        // 로그인 결과 대기
        logger.info('그룹웨어 로그인 처리 중...');
        await delay(5000);
      }
      // iframe 내부에 로그인 폼이 있는 경우
      else {
        logger.info('iframe 내부에 그룹웨어 로그인 폼 감지됨');
        
        // iframe 내에서 작업
        const frame = popupFrame;
        
        // 아이디 입력
        logger.info('iframe 내 아이디 입력 중...');
        await frame.waitForSelector('input#txtLoginID.inputText', { 
          visible: true, 
          timeout: 10000 
        });
        await frame.type('input#txtLoginID.inputText', 'yjw1133');
        logger.info('iframe 내 아이디 입력 완료');
        
        // 비밀번호 입력
        logger.info('iframe 내 비밀번호 입력 중...');
        await frame.waitForSelector('input#txtPassword.inputText', { 
          visible: true, 
          timeout: 10000 
        });
        await frame.type('input#txtPassword.inputText', 'skdmlalfo52@');
        logger.info('iframe 내 비밀번호 입력 완료');
        
        // 로그인 버튼 클릭
        logger.info('iframe 내 로그인 버튼 클릭 중...');
        await frame.click('a#btnLogin.btnSign');
        logger.info('iframe 내 로그인 버튼 클릭 완료');
        
        // 로그인 처리 대기
        await delay(5000);
      }
      
      logger.info('그룹웨어 로그인 처리 완료');
    } catch (loginError) {
      logger.error(`그룹웨어 로그인 처리 오류: ${loginError.message}`);

    }

    // 검증 결과 처리 (필요한 경우 결과 대화 상자 처리)
    try {
      // 결과 메시지나 대화 상자 확인
      const resultSelector = '.infolog-container, .messageBar, .dialog-container';
      const resultElement = await page.$(resultSelector);
      
      if (resultElement) {
        // 메시지 확인
        const messageText = await page.evaluate(el => el.textContent.trim(), resultElement);
        logger.info(`검증 결과 메시지: ${messageText}`);
        
        // 대화 상자 닫기 버튼이 있다면 클릭
        const closeButtonSelector = '.buttonClose, button[title="닫기"], .dialogFooter button';
        if (await page.$(closeButtonSelector)) {
          await page.click(closeButtonSelector);
          logger.info('검증 결과 대화 상자 닫기 버튼 클릭');
        }
      } else {
        logger.info('검증 완료 - 결과 메시지가 없거나 자동으로 닫힘');
      }

    logger.info('그룹웨어 로그인 처리 완료');
    } catch (loginError) {
      logger.error(`그룹웨어 로그인 처리 오류: ${loginError.message}`);
    }

    // 추가 동작 13: eNovator 기반 팝업창 처리 (보안설정)
    logger.info('eNovator 기반 팝업창 처리 중...');
    await delay(8000); // 팝업창이 완전히 로드될 때까지 시간 증가

    try {
      // 모든 창 확인
      const pages = await browser.pages();
      logger.info(`현재 열린 페이지 수: ${pages.length}`);
      
      // 모든 페이지의 URL 로깅
      for (let i = 0; i < pages.length; i++) {
        try {
          const url = pages[i].url();
          logger.info(`페이지 ${i+1} URL: ${url}`);
          
          // 각 페이지의 타이틀 로깅
          const title = await pages[i].title().catch(() => 'No title');
          logger.info(`페이지 ${i+1} 제목: ${title}`);
        } catch (e) {
          logger.warn(`페이지 ${i+1} 정보 접근 오류: ${e.message}`);
        }
      }
      
      // 1. 엑티브 팝업 창 설정 (마지막 열린 창)
      const popupPage = pages[pages.length - 1];
      let hasProcessed = false;
      
      try {
        logger.info('eNovator 팝업창 분석 중...');
        // 페이지 내용 스크린샷
        
        // 페이지 내 모든 프레임 확인
        const allFrames = popupPage.frames();
        logger.info(`팝업창 내 프레임 수: ${allFrames.length}`);
        
        // 모든 프레임의 URL과 HTML 구조 출력
        for (let i = 0; i < allFrames.length; i++) {
          const frameUrl = allFrames[i].url();
          logger.info(`프레임 ${i+1} URL: ${frameUrl}`);
          
          // 각 프레임의 내용 검사
          try {
            const frameContent = await allFrames[i].evaluate(() => {
              return document.body ? document.body.innerHTML.substring(0, 500) : 'No body element';
            });
            logger.info(`프레임 ${i+1} 내용 미리보기: ${frameContent.substring(0, 200)}...`);
          } catch (frameContentError) {
            logger.warn(`프레임 ${i+1} 내용 접근 오류: ${frameContentError.message}`);
          }
        }
        
        // 모든 프레임에서 보안설정 버튼 찾기
        let targetFrame = null;
        let securityBtnFound = false;
        
        for (let i = 0; i < allFrames.length; i++) {
          try {
            const hasSecurityBtn = await allFrames[i].evaluate(() => {
              const allElements = Array.from(document.querySelectorAll('*'));
              return allElements.some(el => 
                el.textContent && 
                el.textContent.includes('보안설정') && 
                (el.id === 'hbtnSetSecurity' || el.tagName.toLowerCase() === 'span')
              );
            });
            
            if (hasSecurityBtn) {
              targetFrame = allFrames[i];
              logger.info(`보안설정 버튼이 있는 프레임 발견: 프레임 ${i+1}`);
              securityBtnFound = true;
              break;
            }
          } catch (frameSearchError) {
            logger.warn(`프레임 ${i+1} 검색 오류: ${frameSearchError.message}`);
          }
        }
        
        // 보안설정 버튼이 있는 프레임을 찾았으면 해당 프레임에서 처리
        if (securityBtnFound && targetFrame) {
          logger.info('보안설정 버튼이 있는 프레임 접근 중...');
          
          // 보안설정 버튼을 두 번 클릭하고 라디오 버튼 선택 후 확인 버튼 클릭
          const result = await targetFrame.evaluate(() => {
            try {
              // 1. 보안설정 버튼 찾기
              let securityBtn = document.querySelector('span#hbtnSetSecurity[name="hbtnSetSecurity"][onclick="SetSecurity_OnClick()"]');
              
              // 다양한 방법으로 버튼 찾기
              if (!securityBtn) {
                const allElements = Array.from(document.querySelectorAll('*'));
                const securityBtnCandidates = allElements.filter(el => 
                  el.textContent && 
                  el.textContent.trim() === '보안설정' && 
                  el.tagName.toLowerCase() === 'span'
                );
                
                if (securityBtnCandidates.length > 0) {
                  securityBtn = securityBtnCandidates[0];
                }
              }
              
              if (!securityBtn) {
                return { success: false, message: '보안설정 버튼을 찾을 수 없음' };
              }
              
              console.log('보안설정 버튼 발견:', securityBtn.outerHTML);
              
              // 첫 번째 클릭 - onclick 함수 또는 click 메서드 사용
              if (typeof securityBtn.onclick === 'function') {
                securityBtn.onclick();
                console.log('onclick 함수로 첫 번째 클릭 수행');
              } else {
                securityBtn.click();
                console.log('click 메서드로 첫 번째 클릭 수행');
              }
              
              // 두 번째 클릭 및 후속 작업은 타이머로 수행
              return new Promise((resolve) => {
                // 1초 후 두 번째 클릭
                setTimeout(() => {
                  try {
                    if (typeof securityBtn.onclick === 'function') {
                      securityBtn.onclick();
                    } else {
                      securityBtn.click();
                    }
                    console.log('두 번째 클릭 완료');
                    
                    // 2초 후 라디오 버튼 클릭
                    setTimeout(() => {
                      try {
                        const radioBtn = document.querySelector('input[name="rdoSecurity"][value="1"]');
                        if (radioBtn) {
                          radioBtn.click();
                          console.log('라디오 버튼 클릭 완료');
                          
                          // 1초 후 확인 버튼 클릭
                          setTimeout(() => {
                            try {
                              const confirmBtn = document.querySelector('span.btn.btn-primary.btn-xs[name="btnSecurity"]') || 
                                              document.querySelector('span.btn-primary[name="btnSecurity"]') ||
                                              document.querySelector('span.btn-primary');
                              
                              if (confirmBtn) {
                                confirmBtn.click();
                                console.log('확인 버튼 클릭 완료');
                                resolve({ success: true, message: '전체 작업 완료' });
                              } else {
                                resolve({ success: false, message: '확인 버튼을 찾을 수 없음' });
                              }
                            } catch (confirmError) {
                              resolve({ success: false, message: `확인 버튼 오류: ${confirmError.message}` });
                            }
                          }, 1000);
                        } else {
                          resolve({ success: false, message: '라디오 버튼을 찾을 수 없음' });
                        }
                      } catch (radioError) {
                        resolve({ success: false, message: `라디오 버튼 오류: ${radioError.message}` });
                      }
                    }, 2000);
                  } catch (secondClickError) {
                    resolve({ success: false, message: `두 번째 클릭 오류: ${secondClickError.message}` });
                  }
                }, 1000);
              });
            } catch (error) {
              return { success: false, message: `전체 처리 오류: ${error.message}` };
            }
          });
          
          logger.info(`프레임에서 보안설정 처리 결과: ${JSON.stringify(result)}`);
          
          if (result && result.success) {
            logger.info('보안설정 처리 성공!');
            hasProcessed = true;
          } else {
            logger.warn(`보안설정 처리 실패: ${result ? result.message : '결과 없음'}`);
          }
        } else {
          logger.warn('보안설정 버튼이 있는 프레임을 찾지 못함');
        }
        
        // 프레임에서 처리 실패한 경우 페이지 전체에서 시도
        if (!hasProcessed) {
          logger.info('페이지 전체에서 보안설정 요소 처리 시도...');
          
          const pageResult = await popupPage.evaluate(() => {
            return new Promise((resolve) => {
              try {
                // 페이지 내 모든 요소 검색
                const allElements = Array.from(document.querySelectorAll('*'));
                console.log('페이지 내 총 요소 수:', allElements.length);
                
                // 보안설정 텍스트가 포함된 요소 필터링
                const securityElements = allElements.filter(el => 
                  el.textContent && 
                  el.textContent.trim().includes('보안설정')
                );
                
                console.log('보안설정 관련 요소 수:', securityElements.length);
                console.log('발견된 요소들:', securityElements.map(el => el.outerHTML).join('\n'));
                
                if (securityElements.length === 0) {
                  resolve({ success: false, message: '페이지에서 보안설정 요소를 찾을 수 없음' });
                  return;
                }
                
                // 가장 가능성 높은 요소 선택
                const securityBtn = securityElements.find(el => 
                  el.id === 'hbtnSetSecurity' && 
                  el.tagName.toLowerCase() === 'span'
                ) || securityElements[0];
                
                // 선택된 요소 정보 로깅
                console.log('선택된 보안설정 버튼:', securityBtn.outerHTML);
                
                // 첫 번째 클릭
                if (typeof securityBtn.onclick === 'function') {
                  securityBtn.onclick();
                  console.log('onclick 함수 호출로 첫 번째 클릭 완료');
                } else {
                  securityBtn.click();
                  console.log('click 메서드로 첫 번째 클릭 완료');
                }
                
                // 1초 후 두 번째 클릭
                setTimeout(() => {
                  try {
                    if (typeof securityBtn.onclick === 'function') {
                      securityBtn.onclick();
                    } else {
                      securityBtn.click();
                    }
                    console.log('두 번째 클릭 완료');
                    
                    // 2초 후 라디오 버튼 찾기
                    setTimeout(() => {
                      try {
                        // 라디오 버튼 찾기
                        const radioInputs = Array.from(document.querySelectorAll('input[type="radio"]'));
                        console.log('발견된 라디오 버튼 수:', radioInputs.length);
                        console.log('라디오 버튼들:', radioInputs.map(r => r.outerHTML).join('\n'));
                        
                        const radioBtn = document.querySelector('input[name="rdoSecurity"][value="1"]') || 
                                        radioInputs.find(r => r.value === '1') ||
                                        (radioInputs.length > 0 ? radioInputs[0] : null);
                        
                        if (radioBtn) {
                          radioBtn.click();
                          console.log('라디오 버튼 클릭 완료:', radioBtn.outerHTML);
                          
                          // 1초 후 확인 버튼 찾기
                          setTimeout(() => {
                            try {
                              // 확인 버튼 찾기
                              const confirmBtns = Array.from(document.querySelectorAll('span.btn, span.btn-primary, button.btn-primary'));
                              console.log('발견된 버튼 수:', confirmBtns.length);
                              console.log('버튼들:', confirmBtns.map(b => b.outerHTML).join('\n'));
                              
                              const confirmBtn = document.querySelector('span.btn-primary[name="btnSecurity"]') || 
                                              confirmBtns.find(b => b.textContent.trim() === '확인') ||
                                              (confirmBtns.length > 0 ? confirmBtns[0] : null);
                              
                              if (confirmBtn) {
                                confirmBtn.click();
                                console.log('확인 버튼 클릭 완료:', confirmBtn.outerHTML);
                                resolve({ success: true, message: '전체 작업 완료' });
                              } else {
                                resolve({ success: false, message: '확인 버튼을 찾을 수 없음' });
                              }
                            } catch (confirmError) {
                              resolve({ success: false, message: `확인 버튼 처리 오류: ${confirmError.message}` });
                            }
                          }, 1000);
                        } else {
                          resolve({ success: false, message: '라디오 버튼을 찾을 수 없음' });
                        }
                      } catch (radioError) {
                        resolve({ success: false, message: `라디오 버튼 처리 오류: ${radioError.message}` });
                      }
                    }, 2000);
                  } catch (secondClickError) {
                    resolve({ success: false, message: `두 번째 클릭 오류: ${secondClickError.message}` });
                  }
                }, 1000);
              } catch (error) {
                resolve({ success: false, message: `전체 처리 오류: ${error.message}` });
              }
            });
          });
          
          logger.info(`페이지 전체 보안설정 처리 결과: ${JSON.stringify(pageResult)}`);
          
          if (pageResult && pageResult.success) {
            logger.info('페이지에서 보안설정 처리 성공!');
            hasProcessed = true;
          } else {
            logger.warn(`페이지에서 보안설정 처리 실패: ${pageResult ? pageResult.message : '결과 없음'}`);
          }
        }
      } catch (analysisError) {
        logger.error(`팝업창 분석 오류: ${analysisError.message}`);
      }
      
      // 모든 방법이 실패했다면 사용자에게 수동 작업 요청
      if (!hasProcessed) {
        logger.warn('자동 보안설정 처리 실패, 사용자에게 안내 중...');
        
        try {
          // 팝업창에 알림 표시
          await popupPage.evaluate(() => {
            alert('자동 보안설정 처리에 실패했습니다. 수동으로:\n1. "보안설정" 버튼을 두 번 클릭하세요.\n2. 라디오 버튼(value="1")을 선택하세요.\n3. "확인" 버튼을 클릭하세요.');
          });
          
          // HTML 구조 상세 로깅 (디버깅 목적)
          const htmlStructure = await popupPage.evaluate(() => {
            return document.documentElement.outerHTML.substring(0, 10000);
          });
          
          logger.info(`HTML 구조 일부(디버깅용): ${htmlStructure.substring(0, 500)}...`);
          
          // 사용자가 수동으로 작업할 시간 제공
          logger.info('사용자의 수동 보안설정 작업 대기 중... (40초)');
          await delay(40000);
        } catch (userPromptError) {
          logger.error(`사용자 안내 표시 오류: ${userPromptError.message}`);
        }
      }
      
      logger.info('eNovator 팝업창 처리 완료');
      
    } catch (securityError) {
      logger.error(`보안설정 처리 중 오류 발생: ${securityError.message}`);
      
      // 사용자에게 안내
      try {
        const pages = await browser.pages();
        const lastPage = pages[pages.length - 1];
        
        await lastPage.evaluate(() => {
          alert('보안설정 처리 중 오류가 발생했습니다. 수동으로 처리해주세요:\n1. "보안설정" 버튼을 두 번 클릭\n2. 라디오 버튼 선택\n3. "확인" 버튼 클릭');
        });
      } catch (alertError) {
        logger.error(`알림 표시 오류: ${alertError.message}`);
      }
      
      // 사용자가 수동으로 작업할 시간 제공
      logger.info('사용자의 수동 보안설정 처리 대기 중... (40초)');
      await delay(40000);
    }

        // 추가 동작 14: 특정 ID의 비고 텍스트 복사하여 제목 필드에 붙여넣기
    logger.info('특정 ID의 비고 텍스트 복사 및 제목 필드 붙여넣기 작업 시작...');
    await delay(5000); // 이전 작업 완료 후 충분한 대기 시간

    try {
      // 현재 열린 모든 페이지 확인
      const pages = await browser.pages();
      const popupPage = pages[pages.length - 1]; // 마지막으로 열린 페이지 (eNovator 팝업창)
      
      // 페이지 내 모든 프레임 확인
      const allFrames = popupPage.frames();
      logger.info(`팝업창 내 프레임 수: ${allFrames.length}`);
      
      // 지정된 ID 요소에서 텍스트 복사 및 제목 필드에 붙여넣기
      let copiedText = '';
      let processed = false;
      
      // 모든 프레임을 순회하며 특정 ID를 가진 요소 찾기
      for (let i = 0; i < allFrames.length; i++) {
        try {
          const frameUrl = allFrames[i].url();
          logger.info(`프레임 ${i+1} URL 검사: ${frameUrl}`);
          
          // 각 프레임에서 지정된 ID 요소 찾기 및 텍스트 복사 시도
          const textCopyResult = await allFrames[i].evaluate(() => {
            try {
              // 1. 지정된 ID(SORM_FL_Descrption_13)를 가진 요소 찾기
              const targetElement = document.querySelector('#SORM_FL_Descrption_13');
              
              if (!targetElement) {
                return { success: false, message: '지정된 ID(SORM_FL_Descrption_13)를 가진 요소를 찾을 수 없음' };
              }
              
              console.log('대상 요소 발견:', targetElement.outerHTML);
              
              // 요소의 텍스트 내용 추출
              const cellText = targetElement.textContent.trim();
              console.log('추출된 텍스트:', cellText);
              
              if (!cellText) {
                return { success: false, message: '요소의 텍스트가 비어있음' };
              }
              
              // 2. 제목 필드 찾기
              const subjectField = document.querySelector('input#FORM_FD_Subject.fcs_itn');
              if (!subjectField) {
                return { 
                  success: false, 
                  message: '제목 필드를 찾을 수 없음', 
                  copiedText: cellText 
                };
              }
              
              console.log('제목 필드 발견:', subjectField.outerHTML);
              
              // 제목 필드에 텍스트 붙여넣기
              subjectField.value = cellText;
              
              // 변경 이벤트 발생시키기
              subjectField.dispatchEvent(new Event('input', { bubbles: true }));
              subjectField.dispatchEvent(new Event('change', { bubbles: true }));
              
              return { 
                success: true, 
                message: '지정된 ID 요소의 텍스트 복사 및 제목 필드 붙여넣기 완료', 
                copiedText: cellText 
              };
            } catch (error) {
              return { 
                success: false, 
                message: `처리 중 오류 발생: ${error.message}` 
              };
            }
          });
          
          logger.info(`프레임 ${i+1} 처리 결과: ${JSON.stringify(textCopyResult)}`);
          
          if (textCopyResult && textCopyResult.success) {
            logger.info(`프레임 ${i+1}에서 텍스트 복사 및 붙여넣기 성공: "${textCopyResult.copiedText}"`);
            copiedText = textCopyResult.copiedText;
            processed = true;
            break;
          } else if (textCopyResult && textCopyResult.copiedText) {
            // 텍스트는 찾았지만 붙여넣기는 실패한 경우
            logger.info(`프레임 ${i+1}에서 텍스트 복사만 성공: "${textCopyResult.copiedText}"`);
            copiedText = textCopyResult.copiedText;
          }
        } catch (frameError) {
          logger.warn(`프레임 ${i+1} 처리 오류: ${frameError.message}`);
        }
      }
      
      // 텍스트를 복사했지만 붙여넣기에 실패한 경우 다시 시도
      if (copiedText && !processed) {
        logger.info(`복사된 텍스트 "${copiedText}"를 제목 필드에 붙여넣기 재시도...`);
        
        // 각 프레임을 순회하며 제목 필드 찾기
        for (let i = 0; i < allFrames.length; i++) {
          try {
            const pasteResult = await allFrames[i].evaluate((text) => {
              try {
                const subjectField = document.querySelector('input#FORM_FD_Subject.fcs_itn');
                if (!subjectField) {
                  return { success: false, message: '제목 필드를 찾을 수 없음' };
                }
                
                console.log('제목 필드 발견:', subjectField.outerHTML);
                
                // 제목 필드에 텍스트 붙여넣기
                subjectField.value = text;
                
                // 변경 이벤트 발생시키기
                subjectField.dispatchEvent(new Event('input', { bubbles: true }));
                subjectField.dispatchEvent(new Event('change', { bubbles: true }));
                
                return { success: true, message: '제목 필드 붙여넣기 완료' };
              } catch (error) {
                return { success: false, message: `붙여넣기 중 오류 발생: ${error.message}` };
              }
            }, copiedText);
            
            logger.info(`프레임 ${i+1} 붙여넣기 재시도 결과: ${JSON.stringify(pasteResult)}`);
            
            if (pasteResult && pasteResult.success) {
              logger.info(`프레임 ${i+1}에서 제목 필드 붙여넣기 성공`);
              processed = true;
              break;
            }
          } catch (frameError) {
            logger.warn(`프레임 ${i+1} 붙여넣기 재시도 오류: ${frameError.message}`);
          }
        }
      }
      
      // 위 방법으로 모두 실패한 경우, 더 일반적인 방법으로 시도
      if (!processed) {
        logger.warn('직접적인 ID 접근 방법이 실패하여 클래스 속성으로 시도...');
        
        // 모든 프레임에서 클래스로 시도
        for (let i = 0; i < allFrames.length; i++) {
          try {
            const classSelectorResult = await allFrames[i].evaluate(() => {
              try {
                // 1. 클래스 속성으로 요소 찾기
                const targetElement = document.querySelector('.fcs_it[id="SORM_FL_Descrption_13"]') ||
                                      document.querySelector('span.fcs_it[id$="_Descrption_13"]') ||
                                      document.querySelector('span.fcs_it');
                
                if (!targetElement) {
                  return { success: false, message: '클래스 속성으로도 요소를 찾을 수 없음' };
                }
                
                console.log('클래스 속성으로 요소 발견:', targetElement.outerHTML);
                
                // 요소의 텍스트 내용 추출
                const cellText = targetElement.textContent.trim();
                console.log('추출된 텍스트:', cellText);
                
                if (!cellText) {
                  return { success: false, message: '요소의 텍스트가 비어있음' };
                }
                
                // 2. 제목 필드 찾기
                const subjectField = document.querySelector('input#FORM_FD_Subject.fcs_itn') ||
                                     document.querySelector('input.fcs_itn') ||
                                     document.querySelector('input[id="FORM_FD_Subject"]');
                
                if (!subjectField) {
                  return { success: false, message: '제목 필드를 찾을 수 없음', copiedText: cellText };
                }
                
                console.log('제목 필드 발견:', subjectField.outerHTML);
                
                // 제목 필드에 텍스트 붙여넣기
                subjectField.value = cellText;
                
                // 변경 이벤트 발생시키기
                subjectField.dispatchEvent(new Event('input', { bubbles: true }));
                subjectField.dispatchEvent(new Event('change', { bubbles: true }));
                
                return { success: true, message: '클래스 속성으로 복사 및 붙여넣기 성공', copiedText: cellText };
              } catch (error) {
                return { success: false, message: `클래스 처리 중 오류: ${error.message}` };
              }
            });
            
            logger.info(`프레임 ${i+1} 클래스 속성 처리 결과: ${JSON.stringify(classSelectorResult)}`);
            
            if (classSelectorResult && classSelectorResult.success) {
              logger.info(`프레임 ${i+1}에서 클래스 속성으로 텍스트 복사 및 붙여넣기 성공: "${classSelectorResult.copiedText}"`);
              copiedText = classSelectorResult.copiedText;
              processed = true;
              break;
            } else if (classSelectorResult && classSelectorResult.copiedText) {
              copiedText = classSelectorResult.copiedText;
            }
          } catch (frameError) {
            logger.warn(`프레임 ${i+1} 클래스 속성 처리 오류: ${frameError.message}`);
          }
        }
      }
      
      // 직접 입력된 텍스트를 사용하는 방법 시도
      if (!processed) {
        logger.warn('모든 방법이 실패하여 직접 제공된 텍스트 사용 시도...');
        
        const directText = "4월 Probe card 수리 비용 (상주 인원), 코리아인스트루먼트";
        
        // 각 프레임을 순회하며 제목 필드 찾기
        for (let i = 0; i < allFrames.length; i++) {
          try {
            const directPasteResult = await allFrames[i].evaluate((text) => {
              try {
                const subjectField = document.querySelector('input#FORM_FD_Subject.fcs_itn') ||
                                     document.querySelector('input.fcs_itn') ||
                                     document.querySelector('input[id="FORM_FD_Subject"]');
                
                if (!subjectField) {
                  return { success: false, message: '제목 필드를 찾을 수 없음' };
                }
                
                console.log('제목 필드 발견:', subjectField.outerHTML);
                
                // 제목 필드에 직접 텍스트 입력
                subjectField.value = text;
                
                // 변경 이벤트 발생시키기
                subjectField.dispatchEvent(new Event('input', { bubbles: true }));
                subjectField.dispatchEvent(new Event('change', { bubbles: true }));
                
                return { success: true, message: '직접 텍스트 입력 성공' };
              } catch (error) {
                return { success: false, message: `직접 텍스트 입력 중 오류: ${error.message}` };
              }
            }, directText);
            
            logger.info(`프레임 ${i+1} 직접 텍스트 입력 결과: ${JSON.stringify(directPasteResult)}`);
            
            if (directPasteResult && directPasteResult.success) {
              logger.info(`프레임 ${i+1}에서 직접 텍스트 입력 성공: "${directText}"`);
              copiedText = directText;
              processed = true;
              break;
            }
          } catch (frameError) {
            logger.warn(`프레임 ${i+1} 직접 텍스트 입력 오류: ${frameError.message}`);
          }
        }
      }
      
      // 여전히 실패한 경우 사용자에게 안내
      if (!processed) {
        if (copiedText) {
          logger.warn(`자동 붙여넣기 실패. 복사된 텍스트: "${copiedText}"`);
          
          // 경고 메시지 표시
          await popupPage.evaluate((text) => {
            alert(`텍스트 "${text}"를 자동으로 제목 필드에 붙여넣지 못했습니다. 수동으로 복사하여 제목 필드(ID: FORM_FD_Subject)에 붙여넣기 해주세요.`);
          }, copiedText || "4월 Probe card 수리 비용 (상주 인원), 코리아인스트루먼트");
        } else {
          logger.warn('텍스트 복사 및 붙여넣기 모두 실패');
          
          // 경고 메시지 표시 - 직접 텍스트 제공
          await popupPage.evaluate(() => {
            alert('자동 복사 붙여넣기에 실패했습니다. 수동으로 "4월 Probe card 수리 비용 (상주 인원), 코리아인스트루먼트" 텍스트를 제목 필드에 입력해주세요.');
          });
        }
        
        // 사용자가 수동 작업할 시간 제공
        logger.info('사용자의 수동 작업 대기 중... (30초)');
        await delay(30000);
      }
      
      logger.info('비고 텍스트 복사 및 제목 필드 붙여넣기 작업 완료');
      
    } catch (copyPasteError) {
      logger.error(`비고 텍스트 복사 및 제목 필드 붙여넣기 오류: ${copyPasteError.message}`);
      
      // 사용자에게 안내
      try {
        const pages = await browser.pages();
        const lastPage = pages[pages.length - 1];
        
        await lastPage.evaluate(() => {
          alert('텍스트 복사 및 제목 필드 붙여넣기 중 오류가 발생했습니다. "4월 Probe card 수리 비용 (상주 인원), 코리아인스트루먼트" 텍스트를 수동으로 입력해주세요.');
        });
      } catch (alertError) {
        logger.error(`알림 표시 오류: ${alertError.message}`);
      }
      
      // 사용자가 수동으로 작업할 시간 제공
      logger.info('사용자의 수동 작업 대기 중... (30초)');
      await delay(30000);
    }

    // 성공적으로 완료되면 브라우저를 유지
    logger.info('RPA 작업 성공적으로 완료됨. 브라우저 유지 중...');
    logger.info('----- 작업 요약 -----');
    logger.info('1. D365 페이지 접속 및 로그인');
    logger.info('2. 5초 대기 후 즐겨찾기 아이콘 클릭');
    logger.info('3. "엑셀 전표 업로드" 메뉴 클릭');
    logger.info('4. lookupButton 클릭');
    logger.info('5. "일반전표(ARK)" 텍스트 필드 클릭');
    logger.info('6. 텍스트 박스에 "test" 입력');
    logger.info('7. "업로드" 버튼 클릭');
    logger.info('8. "Browse" 버튼 클릭');
    logger.info('9. "ARK전표업로드 양식" 파일 선택');
    logger.info('10. 파일 선택 대화상자에서 "확인" 버튼 클릭');
    logger.info('11. 최종 "확인" 버튼 클릭');
    logger.info('12. 마지막 "확인" 버튼(kpc_exceluploadforledgerjournal_2_OKButton) 클릭');
    logger.info('13. 분개장 배치 번호 요소 더블클릭');
    logger.info('14. "검증" 버튼 클릭');
    logger.info('15. "그룹웨어" 버튼 클릭');
    logger.info('16. "그룹웨어 승인" 버튼 클릭');
    logger.info('17. 그룹웨어 로그인 진행 ');
    logger.info('18. eNovator 팝업창 보안설정 처리');
    logger.info('19. 비고 열 텍스트 복사 및 제목 필드 붙여넣기');
    logger.info('---------------------');
    
    // 브라우저 유지 (의도적으로 닫지 않음)
    // await browser.close();
    
    return { success: true, browser: browser };
    
  } catch (error) {
    logger.error(`RPA 오류 발생: ${error.message}`);
    
    
    return { success: false, error: error.message, browser: browser };
  }
}

/**
 * 로그인 처리 함수
 * @param {Object} page - Puppeteer 페이지 객체
 * @param {Object} credentials - 로그인 정보 (username, password)
 */
async function handleLogin(page, credentials) {
  try {
  
    // 1. 사용자 이름(이메일) 입력
    logger.info('사용자 이름 입력 중...');
    await page.waitForSelector('#userNameInput', { visible: true, timeout: 10000 });
    await page.type('#userNameInput', credentials.username);
    logger.info('사용자 이름 입력 완료');
    
    // 2. 비밀번호 입력
    logger.info('비밀번호 입력 중...');
    await page.waitForSelector('#passwordInput', { visible: true, timeout: 10000 });
    await page.type('#passwordInput', credentials.password);
    logger.info('비밀번호 입력 완료');
    
    // 3. 로그인 버튼 클릭
    logger.info('로그인 버튼 클릭 중...');
    await page.waitForSelector('#submitButton', { visible: true, timeout: 10000 });
    
    
    await page.click('#submitButton');
    logger.info('로그인 버튼 클릭 완료');
    
    // 로그인 후 페이지 로드 대기
    logger.info('로그인 후 페이지 로드 대기 중...');
    await page.waitForNavigation({ waitUntil: 'networkidle2', timeout: 30000 });
    
    // 로그인 성공 확인
    logger.info('로그인 완료');
    
  } catch (error) {
    // 오류 시 스크린샷
    logger.error(`로그인 오류: ${error.message}`);
    throw error;
  }
}

// 환경 변수에서 인증 정보 가져오기 또는 안전한 방식으로 관리
function getCredentials() {
  // 실제 환경에서는 환경 변수 또는 보안 저장소에서 가져오는 것이 좋습니다
  return {
    username: process.env.D365_USERNAME || 'yjw1133@nepes.co.kr',
    password: process.env.D365_PASSWORD || 'skdmlalfo52@'
  };
}

// 실행 예시
if (require.main === module) {
  const credentials = getCredentials();
  let globalBrowser; // 브라우저 인스턴스 전역 유지
  
  navigateToDynamics365(credentials)
    .then(result => {
      if (result && result.success) {
        logger.info('스크립트 실행 완료');
        logger.info('브라우저 창이 열린 상태로 유지됩니다. 종료하려면 Ctrl+C를 누르세요.');
        globalBrowser = result.browser; // 브라우저 인스턴스 저장
        
        // 프로세스 유지 (브라우저 창이 닫히지 않도록)
        process.stdin.resume();
        
        // 프로세스 종료 시 브라우저도 정리
        process.on('SIGINT', async () => {
          logger.info('프로세스 종료 요청이 감지되었습니다.');
          if (globalBrowser) {
            logger.info('브라우저 종료 중...');
            await globalBrowser.close();
          }
          process.exit(0);
        });
      } else if (result) {
        logger.warn(`스크립트 실행 중 오류 발생: ${result.error}`);
        logger.info('브라우저 창이 열린 상태로 유지됩니다. 종료하려면 Ctrl+C를 누르세요.');
        globalBrowser = result.browser;
        process.stdin.resume();
      }
    })
    .catch(err => {
      logger.error(`스크립트 실행 오류: ${err.message}`);
      // 오류가 발생해도 프로세스 유지
      logger.info('오류가 발생했지만 브라우저 창이 유지됩니다. 종료하려면 Ctrl+C를 누르세요.');
      process.stdin.resume();
    });
}

module.exports = { navigateToDynamics365 };